var meister = angular.module('meister', ['ngMaterial', 'ngAnimate','ngSanitize', 'ngMessages',
 'ngAria', 'ui.router','ngCookies','md.data.table','chart.js']);

meister.constant('SERVER_BASE_URL', "http://localhost:8000/api");

(function(app) {
    app.config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.otherwise('/login');

        $stateProvider.state('login', {
		url: '/login',
		templateUrl: 'partials/login-partial.html',
		controller: 'LoginController'
	})

	.state('home', {
            url: '/',
            templateUrl: 'partials/home-partial.html',
            controller: 'HomeController'
        })

        .state('about', {
            url: '/about',
            templateUrl: 'partials/about-partial.html',
            controller: 'AboutController'
        })
        .state('claims', {
            url: '/claims',
            templateUrl: 'partials/claims-partial.html',
            controller: 'ClaimsController',
            params: {
                filters: []
            }
        })
        .state('reports', {
            url: '/reports',
            templateUrl: 'partials/reports-partial.html',
            controller: 'ReportsController',
            params: {
                filters: []
            }
        })
        .state('claim-details', {
            url: '/claims-details',
            templateUrl: 'partials/claim-details-partial.html',
            controller: 'ClaimDetailsController',
            params: {
                claimno: ''
            }
        })
        .state('reports-summary', {
            url: '/reports-summary',
            templateUrl: 'partials/reports-summary-partial.html',
            controller: 'ReportSummaryController',
            params: {
                PKY: '',
                reportName: ''
            }
        });

    }]).run(['$rootScope', '$location', '$cookieStore', '$http',
    function ($rootScope, $location, $cookieStore, $http) {
        // keep user logged in after page refresh
        $rootScope.globals = $cookieStore.get('globals') || {};
        if ($rootScope.globals.currentUser) {
            $http.defaults.headers.common['Authorization'] = 'Basic ' + $rootScope.globals.currentUser.authdata; // jshint ignore:line
        }
 
        $rootScope.$on('$locationChangeStart', function (event, next, current) {
            // redirect to login page if not logged in
            if ($location.path() !== '/login' && !$rootScope.globals.currentUser) {
                $location.path('/');
            }
        });
    }]);
})(meister);

(function(app) {
	app.factory('AuthenticationService',
    ['Base64', '$http', '$cookieStore', '$rootScope', '$timeout',
    function (Base64, $http, $cookieStore, $rootScope, $timeout) {
        var service = {};

        service.Login = function (username, password, callback) {

           $timeout(function(){
                var response = { success: username === 'arosenthal' && password === 'Pa55word.' };
                if(!response.success) {
                    response.message = 'Username or password is incorrect';
                }
                callback(response);
            }, 1000);

        };
 
        service.SetCredentials = function (username, password) {
            var authdata = Base64.encode(username + ':' + password);
 
            $rootScope.globals = {
                currentUser: {
                    username: username,
                    authdata: authdata
                }
            };
 
            $http.defaults.headers.common['Authorization'] = 'Basic ' + authdata; // jshint ignore:line
            $cookieStore.put('globals', $rootScope.globals);
        };
 
        service.ClearCredentials = function () {
            $rootScope.globals = {};
            $cookieStore.remove('globals');
            $http.defaults.headers.common.Authorization = 'Basic ';
        };
 
        return service;
    }])
 
.factory('Base64', function () {
    /* jshint ignore:start */
 
    var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
 
    return {
        encode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;
 
            do {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);
 
                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;
 
                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }
 
                output = output +
                    keyStr.charAt(enc1) +
                    keyStr.charAt(enc2) +
                    keyStr.charAt(enc3) +
                    keyStr.charAt(enc4);
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";
            } while (i < input.length);
 
            return output;
        },
 
        decode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;
 
            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
            var base64test = /[^A-Za-z0-9\+\/\=]/g;
            if (base64test.exec(input)) {
                window.alert("There were invalid base64 characters in the input text.\n" +
                    "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                    "Expect errors in decoding.");
            }
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 
            do {
                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));
 
                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;
 
                output = output + String.fromCharCode(chr1);
 
                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }
 
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";
 
            } while (i < input.length);
 
            return output;
        }
    };
 
    /* jshint ignore:end */
});
})(meister);

(function(app) {
	app.factory('apiUtils',
    ['$http','SERVER_BASE_URL',
    function ($http, SERVER_BASE_URL) {
       
        var API_BASE_URL = SERVER_BASE_URL;
		
		var METHOD_GET = 'GET';
		var METHOD_POST = 'POST';
		var METHOD_PUT = 'PUT';
		var METHOD_DELETE = 'DELETE';

        var prepareRequest = function(method, path, params, data){
			var req = {};
			req.method = method;
			req.url = API_BASE_URL + path;

			req.params = params || {};

			if (data){
				req.data = data;
			}

			return req;
		};

	var apiUtils = {};

	apiUtils.get = function(path, params, cb){
		var req = prepareRequest(METHOD_GET, path, params, null);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};

	apiUtils.post = function(path, data, cb){
		var req = prepareRequest(METHOD_POST, path, null, data);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};

	apiUtils.put = function(path, data, cb){
		var req = prepareRequest(METHOD_PUT, path, null, data);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};

	apiUtils.del = function(path, params, cb){
		var req = prepareRequest(METHOD_DELETE, path, params, cb);

		$http(req)
			.then(function onSuccess(response){
				cb(null, response.data);
			}, function onError(response){
				cb(response, null);
			});
	};
 

    return apiUtils;
    }]);
})(meister);

(function(app) {
	app.factory('ClaimsService',
    ['$http','SERVER_BASE_URL',
    function ($http,SERVER_BASE_URL) {
        var service = {};

        service.getList = function () {
            return $http.get(SERVER_BASE_URL + '/claims');
        };

        service.getListDetails = function(){
            return $http.get(SERVER_BASE_URL + '/claims/details');
        };

        service.getDetails = function(claimno){
            return $http.get(SERVER_BASE_URL + '/claims/detail/'+claimno);
        }

        service.simulate = function(claimno){
            return $http.get(SERVER_BASE_URL + '/claims/simulate?Json={"CLAIMNO":"' + claimno + '"}');
        }

        service.approve = function(claims_no){
            var json = "";
            _.forEach(claims_no, function(c){
                json += '{"CLAIMNO":"' + c + '"},';
            });
            json = json.substring(0,json.length-1);
            return $http.get(SERVER_BASE_URL + '/claims/approve?Json=[' + json + ']');
        }

        return service;
    }]);
})(meister);
(function(app) {
	app.factory('ReportService',
    ['$http','SERVER_BASE_URL',
    function ($http,SERVER_BASE_URL) {
        var service = {};

        service.getListReport = function(){
            return $http.get(SERVER_BASE_URL + '/reports');
        };

        service.getDetails = function(pki){
        	return $http.get(SERVER_BASE_URL + '/reports/detail/' + pki);
        };

        service.buildDataForGraphicReports = function(data){
        	var groupsByDate = _.groupBy(data, function(item){ return item.PstngDate; });
        	var report = {
        		labels: [],
        		data: []
        	}
        	_.each(groupsByDate, function(item,key){
        		report.labels.push(key);
        		var sum = 0;
        		_.each(item, function(row){
        			sum += Number(row.Quantity.replace("-",""));
        		});
        		report.data.push(sum);
        	});
        	return report;
        };



        return service;
    }]);
})(meister);
(function(app) {
	app.controller('AboutController', ['$scope', function($scope) {
		
	}]);
})(meister);

(function(app) {
	app.controller('ClaimDetailsController', ['$scope','$timeout','$mdSidenav','$state','$mdMedia','$mdMenu','$mdDialog','$stateParams','ClaimsService', 
		function($scope,$timeout, $mdSidenav,$state, $mdMedia, $mdMenu,$mdDialog, $stateParams, ClaimsService) {
		


		$scope.claim = {};
		$scope.tabSelected = 1;
		$scope.is_simulated = false;
		$scope.simulations = [];

		$scope.isMobileDevice = $mdMedia('xs');

		$scope.init = function(){
			console.log($stateParams);
			$scope.promise = ClaimsService.getDetails($stateParams.claimno);
	    	
	    	$scope.promise.then(
		          function(result) { 
		              console.log("ClaimsService.getDetails",result);
			    		$scope.claim = result.data;
			    		if($scope.isMobileDevice){
			    			var budgets = [];
			    			_.forEach($scope.claim.BUDGETS, function(b){
			    				if(b.WBS_ELEMENT == $scope.claim.APPRAISAL.WBS)
			    					budgets.push(b);
			    			});
			    			$scope.claim.BUDGETS = budgets;
			    		}
		          },
		          function(errorPayload) {
		              console.log('failure loading claim details', errorPayload);
		          }
		     );
		}


		_.forEach($scope.budgets,function(b){
			b.$show = false;
		});	

		/*$scope.was_changed_it = function(index, budget){
			var $scope.claim.BUDGETS[index].COSTS
		};*/

		$scope.simulate = function(){
			$scope.promise2 = ClaimsService.simulate($stateParams.claimno);
	    	
	    	$scope.promise2.then(
		          function(result) { 
		          		$scope.is_simulated = true;
		              console.log("ClaimsService.simulate",result);
		              if(result.data && result.data.length>0){
			    		$scope.simulations = result.data[0];
				    	if($scope.isMobileDevice){
				    			var budgets = [];
				    			_.forEach($scope.simulations, function(b){
				    				if(b.WBS_ELEMENT == $scope.claim.APPRAISAL.WBS)
				    					budgets.push(b);
				    			});
				    			$scope.simulations = budgets;
				    		}
				    	}
		          },
		          function(errorPayload) {
		              console.log('failure loading claim simulate', errorPayload);
		          }
		     );
		};

		$scope.aproveConfirm = function(ev){
			var confirm = $mdDialog.confirm()
	          .title('You are about to Approve the following')
	          .textContent('You are about to Approve Claim No ' + $stateParams.claimno)
	          .targetEvent(ev)
	          .ok('Aprove')
	          .cancel('cancel');

		    $mdDialog.show(confirm).then(function() {
		       $scope.aprove(ev);
		    }, function() {
		      $scope.status = 'You decided to keep your debt.';
		    });
		};

		$scope.aprove = function(ev){
			var claims_no = [];
			claims_no.push($stateParams.claimno);
			$scope.promise3 = ClaimsService.approve(claims_no);
	    	
	    	$scope.promise3.then(
		          function(result) { 
		          	  console.log("ClaimsService.approve",result);
		     			$mdDialog.show(
					      $mdDialog.alert()
					        .parent(angular.element(document.querySelector('#popupContainer')))
					        .clickOutsideToClose(true)
					        .title('Successful')
					        .textContent('Claim ' + $stateParams.claimno + ' is Approved')
					        .ok('Ok')
					        .targetEvent(ev)
					    ).then(function(){
					    	$state.go('claims',{filters:[$scope.claim]});
					    });

		     	  },
		          function(errorPayload) {
		              console.log('failure loading claim simulate', errorPayload);
		          }
		     );

					    
		};
	}]);
})(meister);
(function(app) {
	app.controller('ClaimsController', ['$scope','$timeout','$mdSidenav','$mdMedia','$mdMenu','$state','$stateParams','$mdDialog','ClaimsService', 
		function($scope,$timeout, $mdSidenav, $mdMedia, $mdMenu,$state, $stateParams, $mdDialog, ClaimsService) {
		$scope.toggleLeft = buildToggler('left');
    	$scope.toggleRight = buildToggler('right');
    	$scope.claims = [];	
    	$scope.claims_details = [];
    	$scope.total = null;
    	$scope.selected = [];

    	$scope.isMobileDevice = $mdMedia('xs');

    	function buildToggler(componentId) {
	      return function() {
	        $mdSidenav(componentId).toggle();
	      };
	    }

	    $scope.gotoClaimDetails = function(claim){
	    	if(claim.ACCEPTED != 0)
	    		$state.go('claim-details',{claimno:claim.CLAIM});
	    };

	    $scope.init = function(filterBySelected){

	    	console.log("init",filterBySelected);
	    	console.log("params",$stateParams);

	    	$scope.total = null;
	    	$scope.claims = [];
	    	$scope.claims_details = [];

	    	$scope.promise1 = ClaimsService.getList();
	    	$scope.promise2 = ClaimsService.getListDetails();

	    	var filters = [];

	    	if(filterBySelected && $scope.selected.length>0){
	    		filters = angular.copy($scope.selected);
	    		$scope.selected = [];
	    	} 


	    	$scope.promise1.then(
		          function(result) { 
		              console.log("ClaimsService.getList",result);
			    		
			    		_.forEach(result.data.data, function(item){
			    			if(filters.length>0){
			    				var item_found = _.find(filters, function(s){
			    					return s.WBS == item.WBS;
			    				});
			    				if(item_found)
			    					result.data.total -= item.total;
			    				else
			    					$scope.claims.push(item);
			    			} else if($stateParams.filters.length>0){
			    				var item_found = _.find($stateParams.filters, function(s){
			    					return s.APPRAISAL.WBS == item.WBS;
			    				});
			    				if(item_found)
			    					result.data.total -= item.total;
			    				else
			    					$scope.claims.push(item);
			    			} else {
			    				$scope.claims.push(item);
			    			}
			    		});
			    		$scope.total = result.data.total;
		          },
		          function(errorPayload) {
		              console.log('failure loading claims', errorPayload);
		          }
		     );
	    	
	    	$scope.promise2.then(
		          function(result) { 
		              console.log("ClaimsService.getListDetails",result);
		              	_.forEach(result.data.data, function(item){
		              		if(filters.length>0){
		              			var item_found = _.find(filters, function(s){
			    					return s.WBS == item.WBS;
			    				});
			    				if(!item_found)
			    					$scope.claims_details.push(item);
		              		} else if($stateParams.filters.length>0){
		              			var item_found = _.find($stateParams.filters, function(s){
			    					return s.APPRAISAL.WBS == item.WBS;
			    				});
			    				if(!item_found)
			    					$scope.claims_details.push(item);
		              		} else {
		              			$scope.claims_details.push(item);
		              		}
		              	});
		          },
		          function(errorPayload) {
		              console.log('failure loading claims details', errorPayload);
		          }
			);
	    };

	    
	    $scope.showDetails = function(claim){
	    	console.log("showDetails",claim);
	    	/*_.forEach($scope.claims_details,function(item){
	    		item.$showTooltip = false;
	    	});*/

	    	claim.$showTooltip = true;
	    };

	    $scope.hideDetails = function(claim){
	    	console.log("hideDetails",claim);
	    	claim.$showTooltip = false;
	    };

	    $scope.showDetails2 = function(claim){
	    	console.log("showDetails",claim);
	    	/*_.forEach($scope.claims_details,function(item){
	    		item.$showTooltip = false;
	    	});*/
	    	
	    	claim.$showTooltip2 = true;
	    };

	    $scope.hideDetails2 = function(claim){
	    	console.log("hideDetails",claim);
	    	claim.$showTooltip2 = false;
	    };

	    $scope.aproveConfirm = function(ev){
	    	console.log("Approve items selected",$scope.selected);
	    	var textContent = '';
	    	var claims_no = [];
	    	_.forEach($scope.selected,function(item){
	    		claims_no.push(item.CLAIM);
	    		textContent += "Claim " + item.CLAIM + " on WBS " + item.WBS + " for amount $" + item.ACCEPTED.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,') + "<br/>";
	    	});
			var confirm = $mdDialog.confirm()
	          .title('You are about to Approve the following')
	          .htmlContent(textContent)
	          .targetEvent(ev)
	          .ok('Aprove')
	          .cancel('cancel');

		    $mdDialog.show(confirm).then(function() {
		       $scope.aprove(ev, claims_no);
		    }, function() {
		      $scope.status = 'You decided to keep your debt.';
		    });
		};

		$scope.aprove = function(ev, claims_no){
			$scope.promise3 = ClaimsService.approve(claims_no);
	    	
	    	$scope.promise3.then(
		          function(result) { 
		          	  console.log("ClaimsService.approve",result);
		     			$mdDialog.show(
					      $mdDialog.alert()
					        .parent(angular.element(document.querySelector('#popupContainer')))
					        .clickOutsideToClose(true)
					        .title('Successful')
					        .textContent('Selected Claims are Approved')
					        .ok('Ok')
					        .targetEvent(ev)
					    ).then(function(){
					    	$scope.init(true);
					    });

		     	  },
		          function(errorPayload) {
		              console.log('failure loading claim simulate', errorPayload);
		          }
		     );

		    
		};

	}]);
})(meister);

(function(app) {
	app.controller('HomeController', ['$scope','$rootScope','$timeout','$mdSidenav','$mdMenu','$state', 
		function($scope,$rootScope,$timeout, $mdSidenav,$mdMenu, $state) {
		$scope.toggleLeft = buildToggler('left');
    	$scope.toggleRight = buildToggler('right');
    	
	    function buildToggler(componentId) {
	      return function() {
	        $mdSidenav(componentId).toggle();
	      };
	    }

	    $rootScope.gotoHome = function(){
	    	$rootScope.transition = 'fade-in';
	    	$state.go('home');
	    };

	    $rootScope.gotoClaims = function(){
	    	$state.go('claims');
	    };

	    $rootScope.gotoMainReports = function(){
	    	$state.go('reports');
	    };

	     $rootScope.openMenu = function($mdOpenMenu,ev) {
		      $mdOpenMenu(ev);
		 };

	    $rootScope.transition = 'fade-in';
	}]);
})(meister);

(function(app) {
	app.controller('LoginController',
    ['$scope', '$rootScope', '$location', 'AuthenticationService',
    function ($scope, $rootScope, $location, AuthenticationService) {
        // reset login status
        
        AuthenticationService.ClearCredentials();
 
        $scope.login = function () {
            AuthenticationService.Login($scope.username, $scope.password, function(response) {
                if(response.success) {
                    AuthenticationService.SetCredentials($scope.username, $scope.password);
                    $location.path('/');
                } else {
                    $scope.error = response.message;
                }
            });
        };
    }]);
})(meister);

(function(app) {
	app.controller('ReportsController', ['$scope','$timeout','$mdSidenav','$state','$mdMedia','$mdMenu','$mdDialog','$stateParams', 
		'$mdToast','ReportService', 
		function($scope,$timeout, $mdSidenav,$state, $mdMedia, $mdMenu,$mdDialog, $stateParams,
			$mdToast, ReportService) {
		

		$scope.isMobileDevice = $mdMedia('xs');
		$scope.reports = [];
		$scope.report="";
		$scope.selected = [];

		$scope.init = function(){
			$scope.promise = ReportService.getListReport();
	    	
	    	$scope.promise.then(
		          function(result) { 
		          	var firts=true;
		          	angular.forEach(result.data.d.results, function(r, key) {
		          		var obj= angular.fromJson(r.Json);
		          		$scope.reports.push(obj);
		          		if(firts)
		          		{
		          			$scope.report = obj.REPORT_NAME;
		          			firts=false;
		          		}
					 
					});		        	  
		     	  },
		          function(errorPayload) {
		              console.log('failureReportService.getListReport', errorPayload);
		          }
		     );	
		}

		$scope.gotoReportSummary = function(r){
			if(r.STATUS =="S")
	    		$state.go('reports-summary',{PKY:r.PKY, reportName:r.REPORT_NAME});
	    	else
	    		$mdToast.show(
			      $mdToast.simple()
			        .textContent('Report output is being prepared. Check back in a few minutes.')
			        .position('bottom' )
			        .hideDelay(3000)
			    );
	    };

	}]);
})(meister);
(function(app) {
	app.controller('ReportSummaryController', ['$scope','$state','$mdMedia','$mdDialog','$stateParams','$timeout,'ReportService', 
		function($scope,$state, $mdMedia,$mdDialog, $stateParams,$timeout, ReportService) {
		


		$scope.data = [];
		$scope.chartType ="bar";
		
		$scope.isMobileDevice = $mdMedia('xs');

		$scope.chartData = [];
		$scope.labels = [];
		$scope.report_name = "";
		$scope.filterDate="";
		$scope.chartOptions ={
			onClick: function(e) {
			 
		      var element = this.getElementAtEvent(e);
		      if (element.length) {
		         var index = element[0]._index;
		         
		         $timeout(function(){
		         	$scope.filterDate=$scope.labels[index];
		         })
		         console.log( $scope.filterDate);
		      }
		    }
		};


		$scope.init = function(){
			console.log($stateParams.PKY);
			$scope.report_name = $stateParams.reportName;
			$scope.promise = ReportService.getDetails($stateParams.PKY);
	    	
	    	$scope.promise.then(
		          function(result) { 
		            	$scope.data = result.data;
			    		$scope.generateChart();
		          },
		          function(errorPayload) {
		              console.log('failure loading report details', errorPayload);
		          }
		     );

		}

		$scope.gotoReports = function(){
			$state.go('reports');
		};
		
		$scope.generateChart = function(){
			var report = ReportService.buildDataForGraphicReports($scope.data);
			$scope.chartData = report.data;
			$scope.labels = report.labels;
		}

	}]);
})(meister);